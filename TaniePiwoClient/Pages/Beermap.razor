@page "/beermap"

@using BlazorLeaflet.Models
@using BlazorLeaflet.Models.Events
@using BlazorLeaflet.Samples.Data
@using BlazorLeaflet
@inject IJSRuntime jsRuntime

<h1>Piwna mapa</h1>


<div style="height: 500px; width: 500px;">
    <LeafletMap Map="_map" />
</div>

@code
{
    private Map _map;
    private DrawHandler _drawHandler;
    private LatLng _mapCenterLatLng = new LatLng { Lat = 50.061446f, Lng = 19.938076f };
    Random rnd = new Random();

    private static float _markerScale = 0.5f;
    private int sizeX = (int)(107 * _markerScale);
    private int sizeY = (int)(136 * _markerScale);
    private int anchorX = (int)(37 * _markerScale);
    private int anchorY = (int)(133 * _markerScale);

    protected override void OnInitialized()
    {
        Queue<Marker> markers = new Queue<Marker>();
        for (int i = 0; i < 200; i++)
        {
            LatLng _markerLatLng = getRandomLatLng();
            Marker marker = new Marker(_markerLatLng)
            {
                Draggable = false,
                Title = "Marker " + i,
                Popup = new Popup { Content = string.Format("I am at {0:0.00}° lat, {1:0.00}° lng", _markerLatLng.Lat, _markerLatLng.Lng) },
                Tooltip = new Tooltip { Content = "Click and drag to move me" }
            };

            marker.Icon = new Icon
            {
                Url = "/markers/marker_13.png",
                HasAnchor = true,
                Anchor = new System.Drawing.Point(anchorX, anchorY),
                HasSize = true,
                Size = new System.Drawing.Size(sizeX, sizeY),
                //TooltipAnchor = new System.Drawing.Point(37, 233),
            };

            //marker.OnMove += OnDrag;
            //marker.OnMoveEnd += OnDragEnd;

            markers.Enqueue(marker);
        }

        _map = new Map(jsRuntime)
        {
            Center = _mapCenterLatLng,
            Zoom = 11f
        };

        _map.OnInitialized += () =>
        {
            _map.AddLayer(new TileLayer
            {
                UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
                Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
            });

            while (markers.Count > 0)
                _map.AddLayer(markers.Dequeue());
        };

        _drawHandler = new DrawHandler(_map, jsRuntime);
    }

    private LatLng getRandomLatLng()
    {
        float minLat = 50.019156f;
        float minLng = 19.894158f;
        
        float maxLat = 50.083534f;
        float maxLng = 19.972817f;

        float rndLat = (float)(minLat + (maxLat - minLat) * rnd.NextDouble());
        float rndLng = (float)(minLng + (maxLng - minLng) * rnd.NextDouble());

        return new LatLng(rndLat, rndLng);
    }

    //private void OnDrag(Marker marker, DragEvent evt)
    //{
    //    _markerLatLng = evt.LatLng;
    //    StateHasChanged();
    //}

    //private async void OnDragEnd(Marker marker, Event e)
    //{
    //    marker.Position = _markerLatLng;
    //    marker.Popup.Content = string.Format("I am now at {0:0.00}° lat, {1:0.00}° lng", _markerLatLng.Lat, _markerLatLng.Lng);
    //    await LeafletInterops.UpdatePopupContent(jsRuntime, _map.Id, marker);
    //}
}