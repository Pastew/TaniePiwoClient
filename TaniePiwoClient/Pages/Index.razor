@page "/"

@using BlazorLeaflet.Models
@using BlazorLeaflet.Samples.Data
@using BlazorLeaflet
@using System.IO
@using System.Text
@inject IJSRuntime jsRuntime
@inject HttpClient httpClient

<div id="beermap">
    <LeafletMap Map="_map" />
</div>

<div id="pub-info-bottom-box" style="display: block;">
    <div id="pub-info-bottom-box-close"><span class="oi oi-x"></span></div>
    <div id="pub-info-bottom-box-name">Pub pod ziemią</div>
    
    <div id="pub-info-bottom-box-google-maps-link"><a href="https://goo.gl/maps/LDMGMH2Gr9965oyXA">Google Maps <span class="oi oi-external-link"></span></a></div>
    
    <ul id="beer-list">
        <li>Perła lana: <span class="beer-price">5 PLN</span></li>
        <li>Żywiec butelka: <span class="beer-price">12 PLN</span></li>
        <li>Okocim butelka: <span class="beer-price">13 PLN</span></li>
        <li>Okocim butelka: <span class="beer-price">13 PLN</span></li>
        <li>Okocim butelka: <span class="beer-price">13 PLN</span></li>
        <li>Okocim butelka: <span class="beer-price">13 PLN</span></li>
        <li>Okocim butelka: <span class="beer-price">13 PLN</span></li>
        <li>Okocim butelka: <span class="beer-price">13 PLN</span></li>
        <li>Okocim butelka: <span class="beer-price">13 PLN</span></li>
    </ul>
    
    <div id="pub-info-bottom-box-last-update">Ostatnia aktualizacja: 20.07.2021</div>

</div>


@code
{
    private Map _map;
    private DrawHandler _drawHandler;
    private LatLng _mapCenterLatLng = new LatLng { Lat = 50.061446f, Lng = 19.938076f };
    private const string baseURL = "https://raw.githubusercontent.com/Pastew/TaniePiwoDatabase/main/";
    private PubData[] pubDataList;

    private static float _markerScale = 0.5f;
    private int sizeX = (int)(107 * _markerScale);
    private int sizeY = (int)(136 * _markerScale);
    private int anchorX = (int)(37 * _markerScale);
    private int anchorY = (int)(133 * _markerScale);
    private int popupAnchorY = (int)(-120 * _markerScale);
    private int tooltipAnchorY = (int)(-50 * _markerScale);

    protected override async Task OnInitializedAsync()
    {
        _map = new Map(jsRuntime)
        {
            Center = _mapCenterLatLng,
            Zoom = 14f
        };

        _map.OnInitialized += async () =>
        {
            _map.AddLayer(new TileLayer
            {
                UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
                Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
            });

            await SetupMarkers();
        };

        _drawHandler = new DrawHandler(_map, jsRuntime);
    }

    private async Task SetupMarkers()
    {
        HttpResponseMessage response = await httpClient.GetAsync($"{baseURL}krakow.txt");
        string result = await response.Content.ReadAsStringAsync();
        pubDataList = GetPubDataList(result);

        Queue<Marker> markers = new Queue<Marker>();
        foreach (PubData pubData in pubDataList)
        {
            LatLng _markerLatLng = new LatLng(pubData.Lat, pubData.Lng);
            Marker marker = new Marker(_markerLatLng)
            {
                Draggable = false,
                // Title = "Some title",
                Popup = new Popup { Content = $"<b>{pubData.Name}</b>" },
                Tooltip = new Tooltip { Content = FormatBeersContent(pubData.BeerDataList) }
            };

            int cheapestBeerPrice = pubData.CheapestBeerPrice / 100;
            Console.WriteLine($"cheapestBeerPrice: {cheapestBeerPrice}");
            marker.Icon = new Icon
            {
                Url = $"/markers/marker_{cheapestBeerPrice}.png",

                HasAnchor = true,
                Anchor = new System.Drawing.Point(anchorX, anchorY),

                HasSize = true,
                Size = new System.Drawing.Size(sizeX, sizeY),

                HasPopupAnchor = true,
                PopupAnchor = new System.Drawing.Point(0, popupAnchorY),

                HasTooltipAnchor = true,
                TooltipAnchor = new System.Drawing.Point(0, tooltipAnchorY),
                //TooltipAnchor = new System.Drawing.Point(37, 233),
            };

            markers.Enqueue(marker);
        }

        while (markers.Count > 0)
            _map.AddLayer(markers.Dequeue());
    }

    private PubData[] GetPubDataList(string result)
    {
        List<PubData> pubs = new List<PubData>();
        using (StringReader reader = new StringReader(result))
        {
            string line;
            while ((line = reader.ReadLine()) != null)
            {
                List<string> columns = line.Split(";").ToList();
                PubData pubData = new PubData();
                pubs.Add(pubData);
                pubData.Name = columns[0];
                pubData.Lat = float.Parse(columns[1], System.Globalization.CultureInfo.InvariantCulture.NumberFormat);
                pubData.Lng = float.Parse(columns[2], System.Globalization.CultureInfo.InvariantCulture.NumberFormat);

                pubData.BeerDataList = new List<BeerData>();
                for (int i = 3; columns.Count > i; i++)
                {
                    BeerData beerData = new BeerData();
                    List<string> beerStringSplit = columns[i].Split(":").ToList();
                    beerData.Name = beerStringSplit[0];
                    beerData.Price = (int)(float.Parse(beerStringSplit[1].Trim()) * 100);
                    pubData.BeerDataList.Add(beerData);
                }
            }
        }

        return pubs.ToArray();
    }

    private string FormatBeersContent(List<BeerData> pubDataBeerDataList)
    {
        StringBuilder sb = new StringBuilder();
        foreach (BeerData beerData in pubDataBeerDataList)
            sb.Append($"{beerData.Name}: {FormatGroszyToPLN(beerData.Price)}<br>");

        return sb.ToString();
    }

    private static string FormatGroszyToPLN(int groszy)
    {
        float zlotych = groszy / 100f;
        if (zlotych % 1 == 0)
            return $"{zlotych} PLN";
        else
            return String.Format("{0:0.00} PLN", zlotych);
    }

    // Random rnd = new Random();
    // private LatLng getRandomKrakowLatLng()
    // {
    //     float minLat = 50.019156f;
    //     float minLng = 19.894158f;
    //
    //     float maxLat = 50.083534f;
    //     float maxLng = 19.972817f;
    //
    //     float rndLat = (float)(minLat + (maxLat - minLat) * rnd.NextDouble());
    //     float rndLng = (float)(minLng + (maxLng - minLng) * rnd.NextDouble());
    //
    //     return new LatLng(rndLat, rndLng);
    // }
}